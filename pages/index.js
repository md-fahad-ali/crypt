import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
import { getCookie, setCookie } from "cookies-next";
import Nav from "./components/nav";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import Web3 from "web3";
import Modal from "./components/modal";

const inter = Inter({ subsets: ["latin"] });

export default function Home(props) {
  // console.log(web3);
  // console.log(props);

  // For toogle
  const [isModalOpen, setIsModalOpen] = useState(true);
  const [error, setErr] = useState(false);

  const toggleModal = () => {
    setIsModalOpen((prevIsModalOpen) => !prevIsModalOpen);
  };

  const [acc, setAcc] = useState();
  const router = useRouter();
  const [user, setUser] = useState("");
  if (props?.data?.session?.passport) {
  } else {
    try {
      router.push("/auth/login");
    } catch (error) {}
  }
  // console.log(props);
  useEffect(() => {
    setUser(props?.data?.session?.passport?.user?.name);
    if (props?.data?.session?.passport) {
      console.log("yes");
    } else {
      console.log("no");
    }
    return () => {};
  }, [props]);

  async function web3Op() {
    try {
      // const web3 = new Web3(window.ethereum);
      // await window.ethereum.enable();
      // let accounts = await web3.eth.getAccounts();
      // console.log(accounts[0]);
      // let msg = web3.utils.utf8ToHex("Some data");
      // let sig1 = await web3.eth.sign(msg, accounts[0]);
      const web3 = new Web3(window.ethereum);

      const message = "This is a message to be signed.";
      const hash = web3.eth.accounts.hashMessage(message)
      let accounts = await web3.eth.getAccounts();
      const signature = await web3.eth.accounts.sign(hash, accounts[0]);

      console.log(signature);
    } catch (error) {
      console.log(error);
    }
  }
  const getAccount = async () => {
    const account = await window.ethereum.request({ method: "eth_accounts" });
    setAcc(account);
    // console.log("account");
  };
  useEffect(() => {
    const getAccount = async () => {
      try {
        const account = await window.ethereum.request({
          method: "eth_accounts",
        });
        setAcc(account);
        console.log(account);
      } catch (error) {
        setErr(true);
      }
    };

    getAccount();
  }, []);

  // window.ethereum.request()

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav
        user={props?.data?.session?.passport ? user : "default"}
        csrf={props}
      />
      {props?.data?.session && (
        <main className={`${styles.main} ${inter.className}`}>
          {acc?.length != 1 ? (
            <Modal
              isOpen={isModalOpen}
              toggle={toggleModal}
              closebtnShow={"none"}
            >
              <h1>Warning!</h1>
              <br />
              {error ? (
                <div>
                  <h3>Please install Metamask Extension</h3>
                </div>
              ) : (
                <div>
                  <p>{"Please connect your wallet"}</p>
                  <button
                    className={styles.cbtn}
                    onClick={(e) => {
                      web3Op();
                    }}
                  >
                    Connect
                  </button>
                </div>
              )}
            </Modal>
          ) : (
            ""
          )}

          <div>
            <h1>Hello World</h1>
            <p>Welcome {user}</p>

            <button
              onClick={(e) => {
                getAccount();
              }}
            >
              Get
            </button>
          </div>

          <footer>
            <p>copyright @2023</p>
          </footer>
        </main>
      )}
    </>
  );
}

// export const getServerSideProps = async ({ req, res }) => {
//   const result = await axios.get(
//     `${req.headers["x-forwarded-proto"]}://${req.headers.host}/api/auth/login`,
// {
//   withCredentials: true,
//   headers: {
//     Cookie: req.headers.cookie,
//   },
// }
//   );
// const t = getCookie("_csrf", { req, res });
// //console.log(t?.length || 0);
// const ck = t?.length || 0;
// if (ck == 0) {
//   setCookie("_csrf", uuidv4(), {
//     req,
//     res,
//     httpOnly: true,
//     secure: process.env.NODE_ENV !== "development",
//     maxAge: 60 * 1000,
//     sameSite: "lax",
//     path: "/",
//   });
//   console.log("cookie set");
// }

//   // console.log(res);
//   return {
//     props: {
//       data: result?.data,

//       csrf: getCookie("_csrf", { req, res }) || {},
//     },
//   };
// };

export const getServerSideProps = async ({ req, res }) => {
  const csrfToken = getCookie("_csrf", { req, res }) || "";

  if (!csrfToken) {
    setCookie("_csrf", uuidv4(), {
      req,
      res,
      httpOnly: true,
      secure: process.env.NODE_ENV !== "development",
      maxAge: 60 * 1000,
      sameSite: "lax",
      path: "/",
    });
    console.log("cookie set");
  }

  const headers = {
    "Content-Type": "application/json",
    Cookie: req.headers.cookie || "",
  };
  try {
    const check = process.env.NODE_ENV == "development";
    const test = await axios.get(
      check
        ? `${req.headers["x-forwarded-proto"]}://${req.headers.host}/api/auth/login`
        : `${process.env.WEB_URL}/api/auth/login`,
      {
        withCredentials: true,
        headers: {
          Cookie: req.headers.cookie,
        },
      }
    );

    return {
      props: {
        data: test.data,
        csrf: getCookie("_csrf", { req, res }) || {},
      },
    };
  } catch (error) {
    console.log(error);
    return {
      props: {},
    };
  }
};
